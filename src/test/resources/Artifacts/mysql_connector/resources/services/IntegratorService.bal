package resources.services;

import ballerina.net.http;
import ballerina.lang.messages;
import ballerina.lang.errors;

@http:configuration {
    basePath:"/sql"
}
service <http> IntegratorService {

   @http:resourceConfig {
        methods:["POST"],
        path:"/insert/perRecord"
    }
    resource insertPerRecordToDBResource (message m) {
        message response = {};
        errors:Error err;
        json payload = messages:getJsonPayload(m);
        var keys, resultCount, err = insertPerRecordToDB(payload);
        if (err == null){
              string responsePayload;
              int length = lengthof keys;
              int i = 0;
              while (i<length){
                    if (i == 0){
                         responsePayload = keys[i];
                     }
                     else{
                        responsePayload = responsePayload + keys[i];
                    }
                    i = i+1;
              }
              responsePayload = responsePayload + "insertedRowCount:" + resultCount;
              messages:setStringPayload(response, responsePayload);
        }
        else{
              messages:setStringPayload(response, err.msg);
        }

        reply response;
    }

     @http:resourceConfig {
        methods:["POST"],
        path:"/insert/nonkey"
    }
     resource insertAutoGeneratedKeysNonKeyColResource (message m) {
        message response = {};
        errors:Error err;
        json payload = messages:getJsonPayload(m);
        var keys, resultCount, err = insertAutoGeneratedKeysNonKeyCol(payload);
        if (err == null){
              string responsePayload;
              int length = lengthof keys;
              int i = 0;
              while (i<length){
                    if (i == 0){
                         responsePayload = keys[i];
                     }
                     else{
                        responsePayload = responsePayload + keys[i];
                    }
                    i = i+1;
              }
              responsePayload = responsePayload + "insertedRowCount:" + resultCount;
              messages:setStringPayload(response, responsePayload);
        }
        else{
              messages:setStringPayload(response, err.msg);
        }
        reply response;
    }

       @http:resourceConfig {
        methods:["POST"],
        path:"/insert/missingcol"
    }

    resource insertMissingColResource (message m) {
        message response = {};
        errors:Error err;
        json payload = messages:getJsonPayload(m);
        var keys, resultCount, err = insertWithMissingCol(payload);
        if (err == null){
              string responsePayload;
              int length = lengthof keys;
              int i = 0;
              while (i<length){
                    if (i == 0){
                         responsePayload = keys[i];
                     }
                     else{
                        responsePayload = responsePayload + keys[i];
                    }
                    i = i+1;
              }
              responsePayload = responsePayload + "insertedRowCount:" + resultCount;
              messages:setStringPayload(response, responsePayload);
        }
        else{
              messages:setStringPayload(response, err.msg);
        }
        reply response;
    }

    @http:resourceConfig {
        methods:["POST"],
        path:"/insert/foreignkey"
    }
    resource insertForeignKeyResource (message m) {
        message response = {};
        errors:Error err;
        json payload = messages:getJsonPayload(m);
        var resultCount, err = insertWithForeignKey(payload);
        if (err == null){
              string responsePayload;
              responsePayload = "insertedRowCount:" + resultCount;
              messages:setStringPayload(response, responsePayload);
        }
        else{
              messages:setStringPayload(response, err.msg);
        }
        reply response;
    }

    @http:resourceConfig {
        methods:["POST"],
        path:"/insert/foreignkeyviolate"
    }
    resource insertForeignKeyViolateResource (message m) {
        message response = {};
        errors:Error err;
        json payload = messages:getJsonPayload(m);
        var resultCount, err = insertWithForeignKeyViolation(payload);
        if (err == null){
              string responsePayload;
              responsePayload = "insertedRowCount:" + resultCount;
              messages:setStringPayload(response, responsePayload);
        }
        else{
              messages:setStringPayload(response, err.msg);
        }
        reply response;
    }

    @http:resourceConfig {
        methods:["POST"],
        path:"/insert/exceeds"
    }
    resource insertExceedsDataSizeResource (message m) {
        message response = {};
        errors:Error err;
        json payload = messages:getJsonPayload(m);
        var keys, resultCount, err = insertExceedsSize(payload);
        if (err == null){
              string responsePayload;
              int length = lengthof keys;
              int i = 0;
              while (i<length){
                    if (i == 0){
                         responsePayload = keys[i];
                     }
                     else{
                        responsePayload = responsePayload + keys[i];
                    }
                    i = i+1;
              }
              responsePayload = responsePayload + "insertedRowCount:" + resultCount;
              messages:setStringPayload(response, responsePayload);
        }
        else{
              messages:setStringPayload(response, err.msg);
        }
        reply response;
    }

    @http:resourceConfig {
        methods:["POST"],
        path:"/insert/batchupdatesuccess"
    }
    resource batchUpdateSuccessResource (message m) {
        message response = {};
        errors:Error err;
        json payload = messages:getJsonPayload(m);
        int batchInsertedCount;
        int total;
        string finalResponsePayload;
        int i = 0;

        var updatedCount, err = batchUpdateSuccess(payload);
        if (err == null){
             int lengthUpdatedCount = lengthof updatedCount;
             while (i < lengthUpdatedCount){
              batchInsertedCount = updatedCount[i];
              total = total + batchInsertedCount;
              i = i + 1;
            }
              finalResponsePayload = <string>total;
        }
        else{
             finalResponsePayload = err.msg;
        }
        messages:setStringPayload(response, finalResponsePayload);
        reply response;
    }

      @http:resourceConfig {
        methods:["POST"],
        path:"/insert/batchupdateforeign"
    }
    resource batchUpdateForeignKeyResource (message m) {
        message response = {};
        errors:Error err;
        json payload = messages:getJsonPayload(m);
        int batchInsertedCount;
        int total;
        string finalResponsePayload;
        int i = 0;

        var updatedCount, err = batchUpdateForeignKeyRef(payload);
        if (err == null){
             int lengthUpdatedCount = lengthof updatedCount;
             while (i < lengthUpdatedCount){
              batchInsertedCount = updatedCount[i];
              total = total + batchInsertedCount;
              i = i + 1;
            }
              finalResponsePayload = <string>total;
        }
        else{
             finalResponsePayload = err.msg;
        }
        messages:setStringPayload(response, finalResponsePayload);
        reply response;
    }

     @http:resourceConfig {
        methods:["POST"],
        path:"/insert/innerjoin"
    }
    resource insertWithInnerJoinResource (message m) {
        message response = {};
        errors:Error err;
        string responsePayload;

        var resultCount, err = insertRecordsWithInnerJoin();
        if (err == null){
              responsePayload = <string>resultCount;
              messages:setStringPayload(response, responsePayload);
        }
        else{
              messages:setStringPayload(response, err.msg);
        }

        reply response;
    }

    @http:resourceConfig {
        methods:["POST"],
        path:"/insert/leftjoin"
    }
    resource insertWithLeftJoinResource (message m) {
        message response = {};
        errors:Error err;
        string responsePayload;

        var resultCount, err = insertRecordsWithLeftJoin();
        if (err == null){
              responsePayload = <string>resultCount;
              messages:setStringPayload(response, responsePayload);
        }
        else{
              messages:setStringPayload(response, err.msg);
        }

        reply response;
    }

    @http:resourceConfig {
        methods:["POST"],
        path:"/insert/rightjoin"
    }
    resource insertWithRightJoinResource (message m) {
        message response = {};
        errors:Error err;
        string responsePayload;

        var resultCount, err = insertRecordsWithRightJoin();
        if (err == null){
              responsePayload = <string>resultCount;
              messages:setStringPayload(response, responsePayload);
        }
        else{
              messages:setStringPayload(response, err.msg);
        }

        reply response;
    }

    @http:resourceConfig {
        methods:["POST"],
        path:"/insert/withoutcol"
    }
    resource insertWithoutColResource (message m) {
        message response = {};
        errors:Error err;
        json payload = messages:getJsonPayload(m);
        var resultCount, err = insertWithoutCol(payload);
        if (err == null){
              string responsePayload;
              responsePayload = <string>resultCount;
              messages:setStringPayload(response, responsePayload);
        }
        else{
              messages:setStringPayload(response, err.msg);
        }

        reply response;
    }

    @http:resourceConfig {
        methods:["POST"],
        path:"/create"
    }
    resource createProcedureResource (message m) {
        message response = {};
        errors:Error err;
        string payload = messages:getStringPayload(m);
        var resultCount, err = createStoredProcedure(payload);
        if (err == null){
              string responsePayload;
              responsePayload = "Procedure created successfully.";
              messages:setStringPayload(response, responsePayload);
        }
        else{
              messages:setStringPayload(response, err.msg);
        }
        reply response;
    }

    @http:resourceConfig {
        methods:["GET"],
        path:"/callsucces/parameter"
    }
    resource callProcedureSuccessWithParamsResource (message m, @http:QueryParam {value:"custNo"} string custNo) {
        message response = {};
        errors:Error err;
        var temp, _ = <int>custNo;
        var shipped, cancelled, resolved, disputed, count, err = callProcedureSuccess(temp);
        if (err == null){
              string responsePayload;
              var a, e1 = (int)shipped;
              var b, _ = (int)cancelled ;
              var c, _ = (int)resolved;
              var d, _ = (int)disputed;
              var e, _ = (int)count;
              responsePayload = a + ":" + b + ":" + c + ":" + d + ":" + e;
              messages:setStringPayload(response, responsePayload);
        }
        else{
              messages:setStringPayload(response, err.msg);
        }
        reply response;
    }

     @http:resourceConfig {
        methods:["GET"],
        path:"/call/directionchange"
    }
    resource callProWithWrongParamDirectionResource (message m, @http:QueryParam {value:"custNo"} string custNo, @http:QueryParam {value:"status"} string status) {
        message response = {};
        errors:Error err;
        var temp, _ = <int>custNo;
        var shipped, cancelled, resolved, disputed, count, err = callProcedureWithWrongDirectionForParams(temp, status);
        if (err == null){
              string responsePayload;
              var a, e1 = (int)shipped;
              var b, _ = (int)cancelled ;
              var c, _ = (int)resolved;
              var d, _ = (int)disputed;
              var e, _ = (int)count;
              responsePayload = a + ":" + b + ":" + c + ":" + d + ":" + e;
              messages:setStringPayload(response, responsePayload);
        }
        else{
              messages:setStringPayload(response, err.msg);
        }
        reply response;
    }

      @http:resourceConfig {
        methods:["GET"],
        path:"/call/lessparamter/in"
    }
    resource callProcWithLessParamsInResource (message m, @http:QueryParam {value:"custNo"} string custNo, @http:QueryParam {value:"status"} string status) {
        message response = {};
        errors:Error err;
        var temp, _ = <int>custNo;
        var shipped, cancelled, resolved, disputed, count, err = callProcedureWithLessInParams(temp, status);
        if (err == null){
              string responsePayload;
              var a, e1 = (int)shipped;
              var b, _ = (int)cancelled ;
              var c, _ = (int)resolved;
              var d, _ = (int)disputed;
              var e, _ = (int)count;
              responsePayload = a + ":" + b + ":" + c + ":" + d + ":" + e;
              messages:setStringPayload(response, responsePayload);
        }
        else{
              messages:setStringPayload(response, err.msg);
        }
        reply response;
    }

     @http:resourceConfig {
        methods:["GET"],
        path:"/call/lessparamter/out"
    }
    resource callProcWithLessParamsOutResource (message m, @http:QueryParam {value:"custNo"} string custNo) {
        message response = {};
        errors:Error err;
        var temp, _ = <int>custNo;
        var shipped, cancelled, resolved, disputed, count, err = callProcedureWithLessOutParams(temp);
        if (err == null){
              string responsePayload;
              var a, e1 = (int)shipped;
              var b, _ = (int)cancelled ;
              var c, _ = (int)resolved;
              var d, _ = (int)disputed;
              var e, _ = (int)count;
              responsePayload = a + ":" + b + ":" + c + ":" + d + ":" + e;
              messages:setStringPayload(response, responsePayload);
        }
        else{
              messages:setStringPayload(response, err.msg);
        }
        reply response;
    }

    @http:resourceConfig {
        methods:["GET"],
        path:"/call/lessparamter/inout"
    }
    resource callProcWithLessParamsInOutResource (message m, @http:QueryParam {value:"custNo"} string custNo) {
        message response = {};
        errors:Error err;
        var temp, _ = <int>custNo;
        var shipped, cancelled, resolved, disputed, count, err = callProcedureWithLessInOutParams(temp);
        if (err == null){
              string responsePayload;
              var a, e1 = (int)shipped;
              var b, _ = (int)cancelled ;
              var c, _ = (int)resolved;
              var d, _ = (int)disputed;
              var e, _ = (int)count;
              responsePayload = a + ":" + b + ":" + c + ":" + d + ":" + e;
              messages:setStringPayload(response, responsePayload);
        }
        else{
              messages:setStringPayload(response, err.msg);
        }
        reply response;
    }

     @http:resourceConfig {
        methods:["GET"],
        path:"/call/mismatchdatatype"
    }
    resource callProWithMismatchingDataTypeResource (message m, @http:QueryParam {value:"custNo"} string custNo, @http:QueryParam {value:"status"} string status) {
        message response = {};
        errors:Error err;
        var temp, _ = <int>custNo;
        var shipped, cancelled, resolved, disputed, count, err = callProcedureWithMismatchingParams(temp, status);
        if (err == null){
              string responsePayload;
              var a, e1 = (int)shipped;
              var b, _ = (int)cancelled ;
              var c, _ = (int)resolved;
              var d, _ = (int)disputed;
              var e, _ = (int)count;
              responsePayload = a + ":" + b + ":" + c + ":" + d + ":" + e;
              messages:setStringPayload(response, responsePayload);
        }
        else{
              messages:setStringPayload(response, err.msg);
        }
        reply response;
    }
}