package resources.services;

import ballerina.net.http;

@http:configuration {
    basePath:"/sql"
}
service <http> IntegratorService {

   @http:resourceConfig {
        methods:["POST"],
        path:"/insert/perRecord"
    }
    resource insertPerRecordToDBResource (http:Request req, http:Response res) {
        error err;
        json payload = req.getJsonPayload();
        var keys, resultCount, err = insertPerRecordToDB(payload);
        if (err == null){
              string responsePayload;
              int length = lengthof keys;
              int i = 0;
              while (i<length){
                    if (i == 0){
                         responsePayload = keys[i];
                     }
                     else{
                        responsePayload = responsePayload + keys[i];
                    }
                    i = i+1;
              }
              responsePayload = responsePayload + "insertedRowCount:" + resultCount;
              res.setStringPayload(responsePayload);
        }
        else{
              res.setStringPayload(err.msg);
        }
        res.send();
    }

     @http:resourceConfig {
        methods:["POST"],
        path:"/insert/nonkey"
    }
     resource insertAutoGeneratedKeysNonKeyColResource (http:Request req, http:Response res) {
        error err;
        json payload = req.getJsonPayload();
        var keys, resultCount, err = insertAutoGeneratedKeysNonKeyCol(payload);
        if (err == null){
              string responsePayload;
              int length = lengthof keys;
              int i = 0;
              while (i<length){
                    if (i == 0){
                         responsePayload = keys[i];
                     }
                     else{
                        responsePayload = responsePayload + keys[i];
                    }
                    i = i+1;
              }
              responsePayload = responsePayload + "insertedRowCount:" + resultCount;
              res.setStringPayload(responsePayload);
        }
        else{
              res.setStringPayload(err.msg);
        }
        res.send();
    }

       @http:resourceConfig {
        methods:["POST"],
        path:"/insert/missingcol"
    }

    resource insertMissingColResource (http:Request req, http:Response res) {
        error err;
        json payload = req.getJsonPayload();
        var keys, resultCount, err = insertWithMissingCol(payload);
        if (err == null){
              string responsePayload;
              int length = lengthof keys;
              int i = 0;
              while (i<length){
                    if (i == 0){
                         responsePayload = keys[i];
                     }
                     else{
                        responsePayload = responsePayload + keys[i];
                    }
                    i = i+1;
              }
              responsePayload = responsePayload + "insertedRowCount:" + resultCount;
              res.setStringPayload(responsePayload);
        }
        else{
              res.setStringPayload(err.msg);
        }
        res.send();
    }

    @http:resourceConfig {
        methods:["POST"],
        path:"/insert/foreignkey"
    }
    resource insertForeignKeyResource (http:Request req, http:Response res) {
        error err;
        json payload = req.getJsonPayload();
        var resultCount, err = insertWithForeignKey(payload);
        if (err == null){
              string responsePayload;
              responsePayload = "insertedRowCount:" + resultCount;
              res.setStringPayload(responsePayload);
        }
        else{
              res.setStringPayload(err.msg);
        }
        res.send();
    }

    @http:resourceConfig {
        methods:["POST"],
        path:"/insert/foreignkeyviolate"
    }
    resource insertForeignKeyViolateResource (http:Request req, http:Response res) {
        error err;
        json payload = req.getJsonPayload();
        var resultCount, err = insertWithForeignKeyViolation(payload);
        if (err == null){
              string responsePayload;
              responsePayload = "insertedRowCount:" + resultCount;
              res.setStringPayload(responsePayload);
        }
        else{
              res.setStringPayload(err.msg);
        }
        res.send();
    }

    @http:resourceConfig {
        methods:["POST"],
        path:"/insert/exceeds"
    }
    resource insertExceedsDataSizeResource (http:Request req, http:Response res) {
        error err;
        json payload = req.getJsonPayload();
        var keys, resultCount, err = insertExceedsSize(payload);
        if (err == null){
              string responsePayload;
              int length = lengthof keys;
              int i = 0;
              while (i<length){
                    if (i == 0){
                         responsePayload = keys[i];
                     }
                     else{
                        responsePayload = responsePayload + keys[i];
                    }
                    i = i+1;
              }
              responsePayload = responsePayload + "insertedRowCount:" + resultCount;
              res.setStringPayload(responsePayload);
        }
        else{
              res.setStringPayload(err.msg);
        }
        res.send();
    }

    @http:resourceConfig {
        methods:["POST"],
        path:"/insert/batchupdatesuccess"
    }
    resource batchUpdateSuccessResource (http:Request req, http:Response res) {
        error err;
        json payload = req.getJsonPayload();
        int batchInsertedCount;
        int total;
        string finalResponsePayload;
        int i = 0;

        var updatedCount, err = batchUpdateSuccess(payload);
        if (err == null){
             int lengthUpdatedCount = lengthof updatedCount;
             while (i < lengthUpdatedCount){
              batchInsertedCount = updatedCount[i];
              total = total + batchInsertedCount;
              i = i + 1;
            }
              finalResponsePayload = <string>total;
        }
        else{
             finalResponsePayload = err.msg;
        }
        res.setStringPayload(finalResponsePayload);
        res.send();
    }

      @http:resourceConfig {
        methods:["POST"],
        path:"/insert/batchupdateforeign"
    }
    resource batchUpdateForeignKeyResource (http:Request req, http:Response res) {
        error err;
        json payload = req.getJsonPayload();
        int batchInsertedCount;
        int total;
        string finalResponsePayload;
        int i = 0;

        var updatedCount, err = batchUpdateForeignKeyRef(payload);
        if (err == null){
             int lengthUpdatedCount = lengthof updatedCount;
              while (i < lengthUpdatedCount){
                  batchInsertedCount = updatedCount[i];
                  total = total + batchInsertedCount;
                  i = i + 1;
            }
              finalResponsePayload = <string>total;
        }
        else{
             finalResponsePayload = err.msg;
        }
        res.setStringPayload(finalResponsePayload);
        res.send();
    }

     @http:resourceConfig {
        methods:["POST"],
        path:"/insert/innerjoin"
    }
    resource insertWithInnerJoinResource (http:Request req, http:Response res) {
        error err;
        string responsePayload;

        var resultCount, err = insertRecordsWithInnerJoin();
        if (err == null){
              responsePayload = <string>resultCount;
              res.setStringPayload(responsePayload);
        }
        else{
              res.setStringPayload(err.msg);
        }
        res.send();
    }

    @http:resourceConfig {
        methods:["POST"],
        path:"/insert/leftjoin"
    }
    resource insertWithLeftJoinResource (http:Request req, http:Response res) {
        error err;
        string responsePayload;

        var resultCount, err = insertRecordsWithLeftJoin();
        if (err == null){
              responsePayload = <string>resultCount;
              res.setStringPayload(responsePayload);
        }
        else{
              res.setStringPayload(err.msg);
        }
        res.send();
    }

    @http:resourceConfig {
        methods:["POST"],
        path:"/insert/rightjoin"
    }
    resource insertWithRightJoinResource (http:Request req, http:Response res) {
        error err;
        string responsePayload;

        var resultCount, err = insertRecordsWithRightJoin();
        if (err == null){
              responsePayload = <string>resultCount;
              res.setStringPayload(responsePayload);
        }
        else{
              res.setStringPayload(err.msg);
        }
        res.send();
    }

    @http:resourceConfig {
        methods:["POST"],
        path:"/insert/withoutcol"
    }
    resource insertWithoutColResource (http:Request req, http:Response res) {
        error err;
        json payload = req.getJsonPayload();
        var resultCount, err = insertWithoutCol(payload);
        if (err == null){
              string responsePayload;
              responsePayload = <string>resultCount;
              res.setStringPayload(responsePayload);
        }
        else{
              res.setStringPayload(err.msg);
        }
        res.send();
    }
}