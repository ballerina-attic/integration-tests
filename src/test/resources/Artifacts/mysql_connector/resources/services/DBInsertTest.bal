package resources.services;

import resources.connectorInit as conn;
import ballerina.lang.errors;
import ballerina.data.sql;
import ballerina.lang.datatables;

sql:ClientConnector connectorInstance = conn:init();

struct ResultPersons {
    int PersonID;
}

function insertPerRecordToDB (json dataset) (string[], int, errors:Error){

    sql:Parameter[] parameters = [];
    datatable df;
    int i = 0;
    string[] keyColumns = [];
    int insertedRowCount;
    int insertTotalRowCount;
    string[] generatedIDs;
    string[] keys = [];
    int length = lengthof dataset.persons;
    errors:Error err;

    try {
        while (i < length) {
            var lastname, _ = (string)dataset.persons[i].lastname;
            sql:Parameter paraLName = {sqlType:"varchar", value:lastname, direction:0};
            var firstname, _ = (string)dataset.persons[i].firstname;
            sql:Parameter paraFName = {sqlType:"varchar", value:firstname, direction:0};
            var age, _ = (int)dataset.persons[i].age;
            sql:Parameter paraAge = {sqlType:"varchar", value:age, direction:0};
            parameters = [paraLName, paraFName, paraAge];
            insertedRowCount, generatedIDs = connectorInstance.updateWithGeneratedKeys ("insert into Persons (Lastname, Firstname, Age) values (?, ?, ?)", parameters, keyColumns);
            insertTotalRowCount = insertTotalRowCount + insertedRowCount;
            keys[i] = generatedIDs[0];
            i = i + 1;
        }

    } catch (errors:Error e) {
        string msg = "Error in database insertion. Please retry";
        e = {msg:msg};
        err = e;
    }
    return keys, insertTotalRowCount, err;
}

function insertAutoGeneratedKeysNonKeyCol (json dataset) (string[], int, errors:Error){

    sql:Parameter[] parameters = [];
    datatable df;
    int i = 0;
    string[] keyColumns = [];
    int insertedRowCount;
    int insertTotalRowCount;
    string[] generatedIDs;
    string[] keys = [];
    int length = lengthof dataset.employees;
    errors:Error err;

    try {
        while (i < length) {
            var nic, _ = (int)dataset.employees[i].nic;
            sql:Parameter paraNic = {sqlType:"varchar", value:nic, direction:0};
            var lastname, _ = (string)dataset.employees[i].lastname;
            sql:Parameter paraLName = {sqlType:"varchar", value:lastname, direction:0};
            var firstname, _ = (string)dataset.employees[i].firstname;
            sql:Parameter paraFName = {sqlType:"varchar", value:firstname, direction:0};
            var age, _ = (int)dataset.employees[i].age;
            sql:Parameter paraAge = {sqlType:"varchar", value:age, direction:0};
            parameters = [paraNic, paraLName, paraFName, paraAge];
            insertedRowCount, generatedIDs = connectorInstance.updateWithGeneratedKeys ("insert into employees (nic ,lastname, firstname, age) values (?, ?, ?, ?)", parameters, keyColumns);
            insertTotalRowCount = insertTotalRowCount + insertedRowCount;
            keys[i] = generatedIDs[0];
            i = i + 1;
        }

    } catch (errors:Error e) {
        string msg = "Error in database insertion. Please retry";
        e = {msg:msg};
        err = e;
    }
    return keys, insertTotalRowCount, err;
}

function insertWithForeignKey (json dataset) (int, errors:Error){

    sql:Parameter[] parameters = [];
    datatable df;
    int i = 0;
    string[] keyColumns = [];
    int insertedRowCount;
    int insertTotalRowCount;
    string[] generatedIDs;
    int pId;
    int length = lengthof dataset.orders;
    errors:Error err;
    errors:TypeCastError em;

    try {
        sql:Parameter paraLName = {sqlType:"varchar", value:"Edwards", direction:0};
        sql:Parameter paraFName = {sqlType:"varchar", value:"Macanzie", direction:0};
        sql:Parameter paraAge = {sqlType:"varchar", value:23, direction:0};
        parameters = [paraLName, paraFName, paraAge];
        insertedRowCount, generatedIDs = connectorInstance.updateWithGeneratedKeys ("insert into Persons (Lastname, Firstname, Age) values (?, ?, ?)", parameters, keyColumns);

        if (insertedRowCount == 1) {
            parameters = [paraLName];
            datatable dt = connectorInstance.select ("select PersonID from persons where Lastname=?", parameters);
            ResultPersons rs;
            while (datatables:hasNext(dt)) {
                any dataStruct = datatables:next(dt);
                rs, em = (ResultPersons)dataStruct;
                pId = rs.PersonID;
            }
            insertedRowCount = 0;
            parameters = [];
            while (i < length) {
                var orderid, _ = (int)dataset.orders[i].orderid;
                sql:Parameter paraOrderId = {sqlType:"integer", value:orderid, direction:0};
                var orderNumber, _ = (int)dataset.orders[i].orderno;
                sql:Parameter paraOrderNumber = {sqlType:"integer", value:orderNumber, direction:0};
                sql:Parameter paraPersonId = {sqlType:"integer", value:pId, direction:0};
                parameters = [paraOrderId, paraOrderNumber, paraPersonId];
                insertedRowCount = connectorInstance.update ("insert into Orders (OrderID ,OrderNumber, PersonID) values (?, ?, ?)", parameters);
                insertTotalRowCount = insertTotalRowCount + insertedRowCount;
                i = i + 1;
            }
        }
    } catch (errors:Error e) {
        string msg = "Error in database insertion. Please retry";
        e = {msg:msg};
        err = e;
    }
    return insertTotalRowCount, err;
}

function insertWithForeignKeyViolation (json dataset) (int, errors:Error){

    sql:Parameter[] parameters = [];
    datatable df;
    int i = 0;
    string[] keyColumns = [];
    int insertedRowCount;
    int insertTotalRowCount;
    string[] generatedIDs;
    int pId;
    int length = lengthof dataset.orders;
    errors:Error err;
    errors:TypeCastError em;

    try {
        while (i < length) {
            var orderid, _ = (int)dataset.orders[i].orderid;
            sql:Parameter paraOrderId = {sqlType:"integer", value:orderid, direction:0};
            var orderNumber, _ = (int)dataset.orders[i].orderno;
            sql:Parameter paraOrderNumber = {sqlType:"integer", value:orderNumber, direction:0};
            var perid, _ = (int)dataset.orders[i].personid;
            sql:Parameter paraPersonId = {sqlType:"integer", value:perid, direction:0};
            parameters = [paraOrderId, paraOrderNumber, paraPersonId];
            insertedRowCount = connectorInstance.update ("insert into Orders (OrderID ,OrderNumber, PersonID) values (?, ?, ?)", parameters);
            insertTotalRowCount = insertTotalRowCount + insertedRowCount;
            i = i + 1;
        }
    } catch (errors:Error e) {
        string msg = "Error in database insertion due to foreign key violation. Please retry";
        e = {msg:msg};
        err = e;
    }
    return insertTotalRowCount, err;
}

function insertWithMissingCol (json dataset) (string[], int, errors:Error){

    sql:Parameter[] parameters = [];
    datatable df;
    int i = 0;
    string[] keyColumns = [];
    int insertedRowCount;
    int insertTotalRowCount;
    string[] generatedIDs;
    string[] keys = [];
    int length = lengthof dataset.employees;
    errors:Error err;

    try {
        while (i < length) {
            var nic, _ = (int)dataset.employees[i].nic;
            sql:Parameter paraNic = {sqlType:"varchar", value:nic, direction:0};
            var lastname, _ = (string)dataset.employees[i].lastname;
            sql:Parameter paraLName = {sqlType:"varchar", value:lastname, direction:0};
            var firstname, _ = (string)dataset.employees[i].firstname;
            sql:Parameter paraFName = {sqlType:"varchar", value:firstname, direction:0};
            var age, _ = (int)dataset.employees[i].age;
            sql:Parameter paraAge = {sqlType:"varchar", value:age, direction:0};
            parameters = [paraLName, paraFName, paraAge];
            insertedRowCount, generatedIDs = connectorInstance.updateWithGeneratedKeys ("insert into employees (lastname, firstname, age) values (?, ?, ?)", parameters, keyColumns);
            insertTotalRowCount = insertTotalRowCount + insertedRowCount;
            keys[i] = generatedIDs[0];
            i = i + 1;
        }

    } catch (errors:Error e) {
        string msg = "Error in database insertion. Please retry";
        e = {msg:msg};
        err = e;
    }
    return keys, insertTotalRowCount, err;
}

function insertExceedsSize (json dataset) (string[], int, errors:Error){

    sql:Parameter[] parameters = [];
    datatable df;
    int i = 0;
    string[] keyColumns = [];
    int insertedRowCount;
    int insertTotalRowCount;
    string[] generatedIDs;
    string[] keys = [];
    int length = lengthof dataset.persons;
    errors:Error err;

    try {
        while (i < length) {
            var lastname, _ = (string)dataset.persons[i].lastname;
            sql:Parameter paraLName = {sqlType:"varchar", value:lastname, direction:0};
            var firstname, _ = (string)dataset.persons[i].firstname;
            sql:Parameter paraFName = {sqlType:"varchar", value:firstname, direction:0};
            var age, _ = (int)dataset.persons[i].age;
            sql:Parameter paraAge = {sqlType:"varchar", value:age, direction:0};
            var status, _ = (string)dataset.persons[i].status;
            sql:Parameter paraStatus = {sqlType:"varchar", value:status, direction:0};
            parameters = [paraLName, paraFName, paraAge, paraStatus];
            insertedRowCount, generatedIDs = connectorInstance.updateWithGeneratedKeys ("insert into PersonsInUs (Lastname, Firstname, Age, Status) values (?, ?, ?, ?)", parameters, keyColumns);
            insertTotalRowCount = insertTotalRowCount + insertedRowCount;
            keys[i] = generatedIDs[0];
            i = i + 1;
        }
    } catch (errors:Error e) {
        string msg = "Error in database insertion. Please retry";
        e = {msg:msg};
        err = e;
    }
    return keys, insertTotalRowCount, err;
}

function batchUpdateSuccess (json dataset) (int[], errors:Error){

    sql:Parameter[] para = [];
    sql:Parameter[][] params = [];
    int lengthOfBatch = lengthof dataset.persons;
    int i = 0;
    int[] count;
    errors:Error errBatch;

    try {
        while (i < lengthOfBatch) {
            var id, _ = (int)dataset.persons[i].id;
            sql:Parameter paraId = {sqlType:"integer", value:id, direction:0};
            var lastname, _ = (string)dataset.persons[i].lastname;
            sql:Parameter paraLName = {sqlType:"varchar", value:lastname, direction:0};
            var firstname, _ = (string)dataset.persons[i].firstname;
            sql:Parameter paraFName = {sqlType:"varchar", value:firstname, direction:0};
            var age, _ = (int)dataset.persons[i].age;
            sql:Parameter paraAge = {sqlType:"varchar", value:age, direction:0};
            var status, _ = (string)dataset.persons[i].status;
            sql:Parameter paraStatus = {sqlType:"varchar", value:status, direction:0};
            para = [paraId, paraLName, paraFName, paraAge, paraStatus];
            params[i] = para;
            i = i + 1;
        }
        count = connectorInstance.batchUpdate ("insert into People (PersonID, Lastname, Firstname, Age, Status) values (?, ?, ?, ?, ?)", params);
        errBatch = null;
     } catch (errors:Error e) {
        string msg = "Database insertion error in batch. Please retry";
        e = {msg:msg};
        errBatch =  e;
    }
    return count, errBatch;
}

function batchUpdateForeignKeyRef (json dataset) (int[], errors:Error){

    sql:Parameter[] para = [];
    sql:Parameter[][] params = [];
    int lengthOfBatch = lengthof dataset.persons;
    int i = 0;
    int[] count;
    errors:Error errBatch;

    try {
        while (i < lengthOfBatch) {
            var id, _ = (int)dataset.persons[i].id;
            sql:Parameter paraId = {sqlType:"integer", value:id, direction:0};
            var lastname, _ = (string)dataset.persons[i].lastname;
            sql:Parameter paraLName = {sqlType:"varchar", value:lastname, direction:0};
            var firstname, _ = (string)dataset.persons[i].firstname;
            sql:Parameter paraFName = {sqlType:"varchar", value:firstname, direction:0};
            var deptid, _ = (int)dataset.persons[i].deptid;
            sql:Parameter paraDeptId = {sqlType:"varchar", value:deptid, direction:0};
            var status, _ = (string)dataset.persons[i].status;
            sql:Parameter paraStatus = {sqlType:"varchar", value:status, direction:0};
            para = [paraId, paraLName, paraFName, paraDeptId, paraStatus];
            params[i] = para;
            i = i + 1;
        }
        count = connectorInstance.batchUpdate ("insert into EmployeesSL (PersonID, Lastname, Firstname, DeptID, Status) values (?, ?, ?, ?, ?)", params);
        errBatch = null;
    } catch (errors:Error e) {
        string msg = "Database insertion error in batch. Please retry";
        e = {msg:msg};
        errBatch =  e;
    }
    return count, errBatch;
}

function insertRecordsWithInnerJoin () (int, errors:Error){

    sql:Parameter[] parameters = [];
    errors:Error err;
    int insertedRowCount;

    try {
        insertedRowCount = connectorInstance.update("Insert into Temp (LastName, FirstName) select LastName, FirstName from EmployeesSL inner join DeptManagers on EmployeesSL.PersonID = DeptManagers.PersonID", parameters);
    } catch (errors:Error e) {
        string msg = "Error in database insertion. Please retry";
        e = {msg:msg};
        err = e;
    }
    return insertedRowCount, err;
}

function insertRecordsWithLeftJoin () (int, errors:Error){

    sql:Parameter[] parameters = [];
    errors:Error err;
    int insertedRowCount;

    try {
        insertedRowCount = connectorInstance.update("Insert into Temp (LastName, FirstName) select LastName, FirstName from EmployeesSL left join DeptManagers on EmployeesSL.PersonID = DeptManagers.PersonID", parameters);
    } catch (errors:Error e) {
        string msg = "Error in database insertion. Please retry";
        e = {msg:msg};
        err = e;
    }
    return insertedRowCount, err;
}

function insertRecordsWithRightJoin () (int, errors:Error){

    sql:Parameter[] parameters = [];
    errors:Error err;
    int insertedRowCount;

    try {
        insertedRowCount = connectorInstance.update("Insert into Temp (LastName, FirstName) select LastName, FirstName from EmployeesSL right join DeptManagers on EmployeesSL.PersonID = DeptManagers.PersonID", parameters);
    } catch (errors:Error e) {
        string msg = "Error in database insertion. Please retry";
        e = {msg:msg};
        err = e;
    }
    return insertedRowCount, err;
}

function insertWithoutCol (json dataset) (int, errors:Error){

    sql:Parameter[] parameters = [];
    datatable df;
    int i = 0;
    int insertedRowCount;
    int insertTotalRowCount;
    int length = lengthof dataset.persons;
    errors:Error err;

    try {
        while (i < length) {
            var id, _ = (int)dataset.persons[i].id;
            sql:Parameter paraId = {sqlType:"integer", value:id, direction:0};
            var lastname, _ = (string)dataset.persons[i].lastname;
            sql:Parameter paraLName = {sqlType:"varchar", value:lastname, direction:0};
            var firstname, _ = (string)dataset.persons[i].firstname;
            sql:Parameter paraFName = {sqlType:"varchar", value:firstname, direction:0};
            var age, _ = (int)dataset.persons[i].age;
            sql:Parameter paraAge = {sqlType:"integer", value:age, direction:0};
            var status, _ = (string)dataset.persons[i].status;
            sql:Parameter paraStatus = {sqlType:"varchar", value:status, direction:0};
            parameters = [paraId, paraLName, paraFName, paraAge, paraStatus];
            insertedRowCount = connectorInstance.update("insert into Samplepersons values (?, ?, ?, ?, ?)", parameters);
            insertTotalRowCount = insertTotalRowCount + insertedRowCount;
            i = i + 1;
        }

    } catch (errors:Error e) {
        string msg = "Error in database insertion. Please retry";
        e = {msg:msg};
        err = e;
    }
    return insertTotalRowCount, err;
}
